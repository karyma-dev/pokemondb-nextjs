{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/karyma/Desktop/Github/Pokemondb/src/components/SearchBar/SuggestionBox.tsx\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Pokemons from '../../assets/data/Pokemons';\n\nvar SuggestionBox = function SuggestionBox(_ref) {\n  var text = _ref.text,\n      autoComplete = _ref.autoComplete;\n\n  var renderSuggestions = function renderSuggestions() {\n    var suggestions = [];\n    Pokemons.forEach(function (pokemon) {\n      if (pokemon.includes(text.toLowerCase())) {\n        [].concat(suggestions, [pokemon]);\n      }\n    }); // return filteredSuggestions.map((data, i) => <li key={i} onClick={() => autoComplete(data)}>{data}</li>)\n  };\n\n  var render = text ? renderSuggestions() : null;\n  return __jsx(\"ul\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  }, render);\n};\n\n_c = SuggestionBox;\nexport default SuggestionBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"SuggestionBox\");","map":{"version":3,"sources":["/Users/karyma/Desktop/Github/Pokemondb/src/components/SearchBar/SuggestionBox.tsx"],"names":["Pokemons","SuggestionBox","text","autoComplete","renderSuggestions","suggestions","forEach","pokemon","includes","toLowerCase","render"],"mappings":";;;;;AAAA,OAAOA,QAAP,MAAqB,4BAArB;;AAGA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,OAA0B;AAAA,MAAxBC,IAAwB,QAAxBA,IAAwB;AAAA,MAAlBC,YAAkB,QAAlBA,YAAkB;;AAC5C,MAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC5B,QAAMC,WAAW,GAAG,EAApB;AAEAL,IAAAA,QAAQ,CAACM,OAAT,CAAiB,UAAAC,OAAO,EAAI;AACxB,UAAGA,OAAO,CAACC,QAAR,CAAiBN,IAAI,CAACO,WAAL,EAAjB,CAAH,EAAwC;AACpC,kBAAIJ,WAAJ,GAAiBE,OAAjB;AACH;AACJ,KAJD,EAH4B,CAW5B;AACH,GAZD;;AAcA,MAAMG,MAAM,GAAGR,IAAI,GAAGE,iBAAiB,EAApB,GAAyB,IAA5C;AAGA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKM,MADL,CADJ;AAKH,CAvBD;;KAAMT,a;AAyBN,eAAeA,aAAf","sourcesContent":["import Pokemons from '../../assets/data/Pokemons'\nimport Berries from '../../assets/data/Berries'\n\nconst SuggestionBox = ({text, autoComplete}) => {\n    const renderSuggestions = () => {\n        const suggestions = []\n\n        Pokemons.forEach(pokemon => {\n            if(pokemon.includes(text.toLowerCase())){\n                [...suggestions, pokemon]\n            }\n        })\n\n        \n\n        // return filteredSuggestions.map((data, i) => <li key={i} onClick={() => autoComplete(data)}>{data}</li>)\n    }\n\n    const render = text ? renderSuggestions() : null\n\n\n    return (\n        <ul>\n            {render}\n        </ul>\n    )\n}\n\nexport default SuggestionBox"]},"metadata":{},"sourceType":"module"}