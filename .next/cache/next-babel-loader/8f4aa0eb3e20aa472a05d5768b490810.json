{"ast":null,"code":"var _jsxFileName = \"/Users/karyma/Desktop/Github/Pokemondb/src/components/SearchBar/SuggestionBox.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Pokemons from '../../assets/data/Pokemons';\nimport Berries from '../../assets/data/Berries';\nimport styles from './SuggestionBox.module.css';\n\nconst SuggestionBox = ({\n  text,\n  autoComplete\n}) => {\n  const renderSuggestions = () => {\n    let suggestions = [];\n    Berries.forEach(berry => {\n      if (berry.includes(text.toLowerCase())) {\n        suggestions = [...suggestions, {\n          [berry]: 'berries'\n        }];\n      }\n    });\n    Pokemons.forEach(pokemon => {\n      if (pokemon.includes(text.toLowerCase())) {\n        suggestions = [...suggestions, {\n          [pokemon]: 'pokedex'\n        }];\n      }\n    });\n    suggestions.sort((a, b) => {\n      if (Object.keys(a) > Object.keys(b)) {\n        return 1;\n      } else {\n        return -1;\n      }\n    });\n    return suggestions.map((data, i) => __jsx(\"li\", {\n      className: styles.item,\n      key: i,\n      onClick: () => autoComplete(data),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 45\n      }\n    }, Object.keys(data)));\n  };\n\n  const render = text ? renderSuggestions() : null;\n  return __jsx(\"ul\", {\n    className: styles.list,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, render);\n};\n\nexport default SuggestionBox;","map":{"version":3,"sources":["/Users/karyma/Desktop/Github/Pokemondb/src/components/SearchBar/SuggestionBox.tsx"],"names":["Pokemons","Berries","styles","SuggestionBox","text","autoComplete","renderSuggestions","suggestions","forEach","berry","includes","toLowerCase","pokemon","sort","a","b","Object","keys","map","data","i","item","render","list"],"mappings":";;;AAAA,OAAOA,QAAP,MAAqB,4BAArB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AAEA,OAAOC,MAAP,MAAmB,4BAAnB;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAACC,EAAAA,IAAD;AAAOC,EAAAA;AAAP,CAAD,KAA0B;AAC5C,QAAMC,iBAAiB,GAAG,MAAM;AAC5B,QAAIC,WAAW,GAAG,EAAlB;AAEAN,IAAAA,OAAO,CAACO,OAAR,CAAgBC,KAAK,IAAI;AACrB,UAAGA,KAAK,CAACC,QAAN,CAAeN,IAAI,CAACO,WAAL,EAAf,CAAH,EAAsC;AAClCJ,QAAAA,WAAW,GAAG,CAAC,GAAGA,WAAJ,EAAiB;AAAE,WAACE,KAAD,GAAS;AAAX,SAAjB,CAAd;AACH;AACJ,KAJD;AAMAT,IAAAA,QAAQ,CAACQ,OAAT,CAAiBI,OAAO,IAAI;AACxB,UAAGA,OAAO,CAACF,QAAR,CAAiBN,IAAI,CAACO,WAAL,EAAjB,CAAH,EAAwC;AACpCJ,QAAAA,WAAW,GAAG,CAAC,GAAGA,WAAJ,EAAiB;AAAE,WAACK,OAAD,GAAW;AAAb,SAAjB,CAAd;AACH;AACJ,KAJD;AAQAL,IAAAA,WAAW,CAACM,IAAZ,CAAiB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACvB,UAAGC,MAAM,CAACC,IAAP,CAAYH,CAAZ,IAAiBE,MAAM,CAACC,IAAP,CAAYF,CAAZ,CAApB,EAAmC;AAC/B,eAAO,CAAP;AACH,OAFD,MAEO;AACH,eAAO,CAAC,CAAR;AACH;AACJ,KAND;AAQA,WAAOR,WAAW,CAACW,GAAZ,CAAgB,CAACC,IAAD,EAAOC,CAAP,KAAa;AAAI,MAAA,SAAS,EAAElB,MAAM,CAACmB,IAAtB;AAA4B,MAAA,GAAG,EAAED,CAAjC;AAAoC,MAAA,OAAO,EAAE,MAAMf,YAAY,CAACc,IAAD,CAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAwEH,MAAM,CAACC,IAAP,CAAYE,IAAZ,CAAxE,CAA7B,CAAP;AACH,GA1BD;;AA4BA,QAAMG,MAAM,GAAGlB,IAAI,GAAGE,iBAAiB,EAApB,GAAyB,IAA5C;AAEA,SACI;AAAI,IAAA,SAAS,EAAEJ,MAAM,CAACqB,IAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKD,MADL,CADJ;AAKH,CApCD;;AAsCA,eAAenB,aAAf","sourcesContent":["import Pokemons from '../../assets/data/Pokemons'\nimport Berries from '../../assets/data/Berries'\n\nimport styles from './SuggestionBox.module.css'\n\nconst SuggestionBox = ({text, autoComplete}) => {\n    const renderSuggestions = () => {\n        let suggestions = []\n\n        Berries.forEach(berry => {\n            if(berry.includes(text.toLowerCase())){\n                suggestions = [...suggestions, { [berry]: 'berries' }]\n            }\n        })\n\n        Pokemons.forEach(pokemon => {\n            if(pokemon.includes(text.toLowerCase())){\n                suggestions = [...suggestions, { [pokemon]: 'pokedex' }]\n            }\n        })\n\n\n\n        suggestions.sort((a, b) => {\n            if(Object.keys(a) > Object.keys(b)){\n                return 1\n            } else {\n                return -1\n            }\n        })\n\n        return suggestions.map((data, i) => <li className={styles.item} key={i} onClick={() => autoComplete(data)}>{Object.keys(data)}</li>)\n    }\n\n    const render = text ? renderSuggestions() : null\n\n    return (\n        <ul className={styles.list}>\n            {render}\n        </ul>\n    )\n}\n\nexport default SuggestionBox"]},"metadata":{},"sourceType":"module"}