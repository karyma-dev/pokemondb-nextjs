{"ast":null,"code":"var _jsxFileName = \"/Users/karyma/Desktop/Github/Pokemondb/src/components/SearchBar/SuggestionBox.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Pokemons from '../../assets/data/Pokemons';\nimport Berries from '../../assets/data/Berries';\n\nconst SuggestionBox = ({\n  text,\n  autoComplete\n}) => {\n  const renderSuggestions = () => {\n    let suggestions = [];\n    Pokemons.forEach(pokemon => {\n      if (pokemon.includes(text.toLowerCase())) {\n        suggestions = [...suggestions, {\n          [pokemon]: 'pokedex'\n        }];\n      }\n    });\n    Berries.forEach(berry => {\n      if (berry.includes(text.toLowerCase())) {\n        suggestions = [...suggestions, {\n          [berry]: 'berries'\n        }];\n      }\n    });\n\n    function sortByKey(array, key) {\n      return array.sort((a, b) => {\n        let x = a[key];\n        let y = b[key];\n        return x < y ? -1 : x > y ? 1 : 0;\n      });\n    }\n\n    suggestions.reduce((a, c) => {\n      console.log(a, c);\n      return a + c;\n    });\n    return null; // return filteredSuggestions.map((data, i) => <li key={i} onClick={() => autoComplete(data)}>{data}</li>)\n  }; // const render = text ? renderSuggestions() : null\n\n\n  return __jsx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, renderSuggestions());\n};\n\nexport default SuggestionBox;","map":{"version":3,"sources":["/Users/karyma/Desktop/Github/Pokemondb/src/components/SearchBar/SuggestionBox.tsx"],"names":["Pokemons","Berries","SuggestionBox","text","autoComplete","renderSuggestions","suggestions","forEach","pokemon","includes","toLowerCase","berry","sortByKey","array","key","sort","a","b","x","y","reduce","c","console","log"],"mappings":";;;AAAA,OAAOA,QAAP,MAAqB,4BAArB;AACA,OAAOC,OAAP,MAAoB,2BAApB;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAACC,EAAAA,IAAD;AAAOC,EAAAA;AAAP,CAAD,KAA0B;AAC5C,QAAMC,iBAAiB,GAAG,MAAM;AAC5B,QAAIC,WAAW,GAAG,EAAlB;AAEAN,IAAAA,QAAQ,CAACO,OAAT,CAAiBC,OAAO,IAAI;AACxB,UAAGA,OAAO,CAACC,QAAR,CAAiBN,IAAI,CAACO,WAAL,EAAjB,CAAH,EAAwC;AACpCJ,QAAAA,WAAW,GAAG,CAAC,GAAGA,WAAJ,EAAiB;AAAE,WAACE,OAAD,GAAW;AAAb,SAAjB,CAAd;AACH;AACJ,KAJD;AAMAP,IAAAA,OAAO,CAACM,OAAR,CAAgBI,KAAK,IAAI;AACrB,UAAGA,KAAK,CAACF,QAAN,CAAeN,IAAI,CAACO,WAAL,EAAf,CAAH,EAAsC;AAClCJ,QAAAA,WAAW,GAAG,CAAC,GAAGA,WAAJ,EAAiB;AAAE,WAACK,KAAD,GAAS;AAAX,SAAjB,CAAd;AACH;AACJ,KAJD;;AAMA,aAASC,SAAT,CAAmBC,KAAnB,EAA0BC,GAA1B,EAA+B;AAC3B,aAAOD,KAAK,CAACE,IAAN,CAAW,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAC1B,YAAIC,CAAC,GAAGF,CAAC,CAACF,GAAD,CAAT;AACA,YAAIK,CAAC,GAAGF,CAAC,CAACH,GAAD,CAAT;AAEA,eAASI,CAAC,GAAGC,CAAL,GAAU,CAAC,CAAX,GAAiBD,CAAC,GAAGC,CAAL,GAAU,CAAV,GAAc,CAAtC;AACD,OALM,CAAP;AAMH;;AAEDb,IAAAA,WAAW,CAACc,MAAZ,CAAmB,CAACJ,CAAD,EAAIK,CAAJ,KAAU;AACzBC,MAAAA,OAAO,CAACC,GAAR,CAAYP,CAAZ,EAAeK,CAAf;AACA,aAAOL,CAAC,GAAGK,CAAX;AACH,KAHD;AAKA,WAAO,IAAP,CA7B4B,CA8B5B;AACH,GA/BD,CAD4C,CAiC5C;;;AAGA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKhB,iBAAiB,EADtB,CADJ;AAKH,CAzCD;;AA2CA,eAAeH,aAAf","sourcesContent":["import Pokemons from '../../assets/data/Pokemons'\nimport Berries from '../../assets/data/Berries'\n\nconst SuggestionBox = ({text, autoComplete}) => {\n    const renderSuggestions = () => {\n        let suggestions = []\n\n        Pokemons.forEach(pokemon => {\n            if(pokemon.includes(text.toLowerCase())){\n                suggestions = [...suggestions, { [pokemon]: 'pokedex' }]\n            }\n        })\n\n        Berries.forEach(berry => {\n            if(berry.includes(text.toLowerCase())){\n                suggestions = [...suggestions, { [berry]: 'berries' }]\n            }\n        })\n\n        function sortByKey(array, key) {\n            return array.sort((a, b) => {\n              let x = a[key];\n              let y = b[key];\n              \n              return ((x < y) ? -1 : ((x > y) ? 1 : 0));\n            });\n        }\n\n        suggestions.reduce((a, c) => {\n            console.log(a, c)\n            return a + c\n        })\n\n        return null\n        // return filteredSuggestions.map((data, i) => <li key={i} onClick={() => autoComplete(data)}>{data}</li>)\n    }\n    // const render = text ? renderSuggestions() : null\n\n\n    return (\n        <ul>\n            {renderSuggestions()}\n        </ul>\n    )\n}\n\nexport default SuggestionBox"]},"metadata":{},"sourceType":"module"}